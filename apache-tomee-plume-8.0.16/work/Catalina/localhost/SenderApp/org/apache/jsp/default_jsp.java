/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat (TomEE)/9.0.82 (8.0.16)
 * Generated at: 2024-06-13 12:11:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class default_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("	<html lang=\"en\">\n");
      out.write("\n");
      out.write("	<head>\n");
      out.write("		<meta charset=\"UTF-8\">\n");
      out.write("		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("		<title>SENDER</title>\n");
      out.write("		<link rel=\"stylesheet\" href=\"assets/css/style.css\">\n");
      out.write("		<link rel=\"shortcut icon\" href=\"assets/images/favicon.ico\" type=\"image/x-icon\">\n");
      out.write("	</head>\n");
      out.write("\n");
      out.write("	<body>\n");
      out.write("		<main id=\"main\">\n");
      out.write("			<header>\n");
      out.write("				<img src=\"assets/images/logo.png\" alt=\"Logo\" width=\"5%\">\n");
      out.write("			</header>\n");
      out.write("\n");
      out.write("			<h2>Send Message</h2>\n");
      out.write("\n");
      out.write("			<form id=\"myForm\" method=\"post\" onsubmit=\"submitForm()\" autocomplete=\"off\">\n");
      out.write("				<label for=\"message\">Enter Message:</label>\n");
      out.write("				<input type=\"text\" id=\"message\" name=\"message\" title=\"Please Enter Message\"\n");
      out.write("					placeholder=\"Please Enter Message\" required>\n");
      out.write("				<button type=\"submit\">Send</button>\n");
      out.write("			</form>\n");
      out.write("		</main>\n");
      out.write("		<div id=\"spinnerContainer\" class=\"spinnerContainer\">\n");
      out.write("			<div id=\"spinner\" class=\"spinner\"></div>\n");
      out.write("			<div id=\"spinnerMessage\" class=\"spinnerMessage\">Sending Message....</div>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div id=\"myModal\" class=\"modal\">\n");
      out.write("			<div class=\"modal-content\">\n");
      out.write("				<p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\n");
      out.write("				<button onclick=\"closeModal()\">Close</button>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("		<script type=\"text/javascript\">\n");
      out.write("			function submitForm() {\n");
      out.write("				var myForm = document.getElementById('myForm');\n");
      out.write("				myForm.action = 'send';\n");
      out.write("				myForm.method = 'post';\n");
      out.write("\n");
      out.write("				document.getElementById('main').style.display = 'none';\n");
      out.write("				document.getElementById('spinnerContainer').style.display = 'block';\n");
      out.write("				myForm.submit();\n");
      out.write("			}\n");
      out.write("		</script>\n");
      out.write("	</body>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	<script type=\"text/javascript\">\n");
      out.write("		function closeModal() {\n");
      out.write("			document.getElementById('myModal').style.display = 'none';\n");
      out.write("			document.getElementById('spinnerContainer').style.display = 'none';\n");
      out.write("			document.getElementById('main').style.display = 'block';\n");
      out.write("			document.getElementById('myForm').reset();\n");
      out.write("		}\n");
      out.write("	</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
